  
#use-added-syntax(jitx)
defpackage DA14705-00000HZ2-supports :
  import core
  import collections
  import jitx
  import jitx/commands
  import ocdb/utils/bundles
  import ocdb/utils/property-structs

  import bundles

public defn make-supports ():
  inside pcb-component:
    val all-ios = [self.P0_00 self.P0_01 self.P0_02 self.P0_03 self.P0_04 self.P0_05 self.P0_06 self.P0_07 
                    self.P0_08 self.P0_09 self.P0_10 self.P0_11 self.P0_12 self.P0_13 self.P0_14 self.P0_15 
                    self.P0_16 self.P0_17 self.P0_18 self.P0_19 self.P0_20 self.P0_21 self.P0_22 self.P0_23 
                    self.P0_24 self.P0_25 self.P0_26 self.P0_27 self.P0_28 self.P0_29 self.P0_30 self.P0_31 
                    self.P1_00 self.P1_01 self.P1_02 self.P1_03 self.P1_04 self.P1_05 self.P1_06 self.P1_07 
                    self.P1_08 self.P1_09 self.P1_10 self.P1_11 self.P1_12 self.P1_13 self.P1_14 self.P1_15 
                    self.P1_16 self.P1_17 self.P1_18 self.P1_19 self.P1_20 self.P1_21 self.P1_22 self.P1_23 
                    self.P1_24 self.P1_25 self.P1_26 self.P1_27 self.P1_28 self.P1_29 self.P1_30 self.P1_31 
                    self.P2_00 self.P2_01 self.P2_02 self.P2_03 self.P2_04 self.P2_05 self.P2_06 self.P2_07 
                    self.P2_08 self.P2_09 self.P2_10 self.P2_11 self.P2_12 self.P2_13 self.P2_14]

    for p in all-ios do :
      supports gpio :
        gpio.gpio => p

    ; swd x 3
    supports swd(): ; M33
      swd().swdio  => self.P0_00
      swd().swdclk => self.P0_01
    
    ; supports swd(): ; CMAC M0+
    ;   swd().swdio  => self.P0_04
    ;   swd().swdclk => self.P0_07
    
    ; supports swd(): ; SNC M0+
    ;   swd().swdio  => self.P0_02
    ;   swd().swdclk => self.P0_03

    supports usb-2-data :
      usb-2-data.P => self.P2_10
      usb-2-data.N => self.P2_11
    
    supports ETM :
      ETM.clk => self.P0_31
      ETM.data[0] => self.P1_30
      ETM.data[1] => self.P1_22
      ETM.data[2] => self.P1_31
      ETM.data[3] => self.P1_23

    ; QuadSPI
    supports quad-spi :
      quad-spi.sck => self.P1_26
      quad-spi.cs => self.P1_25
      quad-spi.sdio[0] => self.P1_09
      quad-spi.sdio[1] => self.P1_27
      quad-spi.sdio[2] => self.P1_18
      quad-spi.sdio[3] => self.P1_17

    supports quad-spi :
      quad-spi.sck => self.P1_19
      quad-spi.cs => self.P1_24
      quad-spi.sdio[0] => self.P1_15
      quad-spi.sdio[1] => self.P1_14
      quad-spi.sdio[2] => self.P1_13
      quad-spi.sdio[3] => self.P1_20

    supports octal-spi :
      octal-spi.sck => self.OQSIF_CLK
      octal-spi.cs => self.OQSIF_CS
      octal-spi.sdio[0] => self.OQSIF_D0
      octal-spi.sdio[1] => self.OQSIF_D1
      octal-spi.sdio[2] => self.OQSIF_D2
      octal-spi.sdio[3] => self.OQSIF_D3
      octal-spi.sdio[4] => self.P2_04
      octal-spi.sdio[5] => self.P2_05
      octal-spi.sdio[6] => self.P2_06
      octal-spi.sdio[7] => self.P2_07

    supports quad-spi :
      quad-spi.sck => self.OQSIF_CLK
      quad-spi.cs => self.OQSIF_CS
      quad-spi.sdio[0] => self.OQSIF_D0
      quad-spi.sdio[1] => self.OQSIF_D1
      quad-spi.sdio[2] => self.OQSIF_D2
      quad-spi.sdio[3] => self.OQSIF_D3

    pcb-bundle spi-sck:
      pin p
    
    pcb-bundle spi-sdo:
      pin p
    
    pcb-bundle spi-sdi:
      pin p
    
    pcb-bundle spi-cs:
      pin p
    
    for io in all-ios do :
      supports spi-sck:
        spi-sck.p => io
      supports spi-sdo:
        spi-sdo.p => io
      supports spi-sdi:
        spi-sdi.p => io
      supports spi-cs:
        spi-cs.p => io

    ; SPI
    supports spi([SPI-SDO SPI-SDI SPI-CS]) :
      require spi-sck-pin : spi-sck
      require spi-sdo-pin : spi-sdo
      require spi-sdi-pin : spi-sdi
      require spi-cs-pin  : spi-cs
      spi([SPI-SDO SPI-SDI SPI-CS]).sck => spi-sck-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).sdo => spi-sdo-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).sdi => spi-sdi-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).cs  => spi-cs-pin.p

    ;SPI2
    supports spi([SPI-SDO SPI-SDI SPI-CS]) :
      require spi-sck-pin : spi-sck
      require spi-sdo-pin : spi-sdo
      require spi-sdi-pin : spi-sdi
      require spi-cs-pin  : spi-cs
      spi([SPI-SDO SPI-SDI SPI-CS]).sck => spi-sck-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).sdo => spi-sdo-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).sdi => spi-sdi-pin.p
      spi([SPI-SDO SPI-SDI SPI-CS]).cs  => spi-cs-pin.p

    ; SPI3 with fixed IO pins
    supports spi([SPI-SDO SPI-SDI SPI-CS]) :
      require spi-cs-pin : spi-cs
      spi([SPI-SDO SPI-SDI SPI-CS]).sck => self.P1_28
      spi([SPI-SDO SPI-SDI SPI-CS]).sdo => self.P2_02
      spi([SPI-SDO SPI-SDI SPI-CS]).sdi => self.P0_00
      spi([SPI-SDO SPI-SDI SPI-CS]).cs  => spi-cs-pin.p

    pcb-bundle i2c-scl:
      pin p
    
    pcb-bundle i2c-sda:
      pin p
    
    for io in all-ios do :
      supports i2c-scl:
        i2c-scl.p => io
      supports i2c-sda:
        i2c-sda.p => io

    ; I2C 
    supports i2c :
      require i2c-scl-pin : i2c-scl
      require i2c-sda-pin : i2c-sda
      i2c.scl => i2c-scl-pin.p
      i2c.sda => i2c-sda-pin.p

    ; I2C2
    supports i2c :
      require i2c-scl-pin : i2c-scl
      require i2c-sda-pin : i2c-sda
      i2c.scl => i2c-scl-pin.p
      i2c.sda => i2c-sda-pin.p

    ; I3C
    supports i3c :
      i3c.scl => self.P1_12
      i3c.sda => self.P1_11

    pcb-bundle uart-rx:
      pin p
    
    pcb-bundle uart-tx:
      pin p
    
    pcb-bundle uart-cts:
      pin p
    
    pcb-bundle uart-rts:
      pin p
    
    for io in all-ios do :
      supports uart-rx:
        uart-rx.p => io
      supports uart-tx:
        uart-tx.p => io
      supports uart-cts:
        uart-cts.p => io
      supports uart-rts:
        uart-rts.p => io

    supports uart() :
      require tx-pin: uart-tx
      require rx-pin: uart-rx
      uart().rx => rx-pin.p
      uart().tx => tx-pin.p
    
    supports usart([UART-CTS, UART-RTS, UART-RX, UART-TX]):
      require tx-pin: uart-tx
      require rx-pin: uart-rx
      require cts-pin: uart-cts
      require rts-pin: uart-rts
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).tx => tx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rts => rts-pin.p

    supports usart([UART-CTS, UART-RTS, UART-RX, UART-TX]):
      require tx-pin: uart-tx
      require rx-pin: uart-rx
      require cts-pin: uart-cts
      require rts-pin: uart-rts
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).tx => tx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rx => rx-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).cts => cts-pin.p
      usart([UART-CTS, UART-RTS, UART-RX, UART-TX]).rts => rts-pin.p


    pcb-bundle iso7816-clk:
      pin p
    pcb-bundle iso7816-data:
      pin p
    pcb-bundle iso7816-rst:
      pin p
    pcb-bundle iso7816-ci:
      pin p

    for io in all-ios do :
      supports iso7816-clk:
        iso7816-clk.p => io
      supports iso7816-data:
        iso7816-data.p => io
      supports iso7816-rst:
        iso7816-rst.p => io
      supports iso7816-ci:
        iso7816-ci.p => io

    supports ISO7816:
      require clk-pin : iso7816-clk
      require data-pin : iso7816-data
      require rst-pin : iso7816-rst
      require ci-pin : iso7816-ci
      ISO7816.clk => clk-pin.p
      ISO7816.data => data-pin.p
      ISO7816.rst => rst-pin.p
      ISO7816.ci => ci-pin.p

    pcb-bundle pcm-clk:
      pin p
    pcb-bundle pcm-fsc:
      pin p
    pcb-bundle pcm-di:
      pin p
    pcb-bundle pcm-do:
      pin p
    
    for io in all-ios do :
      supports pcm-clk:
        pcm-clk.p => io
      supports pcm-fsc:
        pcm-fsc.p => io
      supports pcm-di:
        pcm-di.p => io
      supports pcm-do:
        pcm-do.p => io

    supports PCM:
      require pcm-clk-pin : pcm-clk
      require pcm-fsc-pin : pcm-fsc
      require pcm-di-pin : pcm-di
      require pcm-do-pin : pcm-do
      PCM.clk => pcm-clk-pin.p
      PCM.fsc => pcm-fsc-pin.p
      PCM.di => pcm-di-pin.p
      PCM.do => pcm-do-pin.p

    pcb-bundle pdm-clk:
      pin p
    pcb-bundle pdm-data:
      pin p

    for io in all-ios do :
      supports pdm-clk:
        pdm-clk.p => io
      supports pdm-data:
        pdm-data.p => io

    supports PDM:
      require pdm-clk-pin : pdm-clk
      require pdm-data-pin : pdm-data
      PDM.clk => pdm-clk-pin.p
      PDM.data => pdm-data-pin.p

    supports adc :
      adc.adc => self.P0_05
    supports adc :
      adc.adc => self.P0_06
    supports adc :
      adc.adc => self.P0_27
    supports adc :
      adc.adc => self.P0_30

    supports jdi-parallel:
      jdi-parallel.hck       => self.P0_14
      jdi-parallel.enb       => self.P0_18
      jdi-parallel.hst       => self.P0_15
      jdi-parallel.vst       => self.P0_16
      jdi-parallel.xrst      => self.P0_22
      jdi-parallel.red[0]    => self.P0_17
      jdi-parallel.red[1]    => self.P0_23
      jdi-parallel.green[0]  => self.P0_24
      jdi-parallel.green[1]  => self.P1_00
      jdi-parallel.blue[0]   => self.P1_01
      jdi-parallel.blue[1]   => self.P0_21
      jdi-parallel.vcom-frp  => self.P0_19
      jdi-parallel.xfrp      => self.P0_10

    supports spi-display-x1 :
      spi-display-x1.sclk     => self.P0_14
      spi-display-x1.cs       => self.P0_18
      spi-display-x1.sd       => self.P0_15
      spi-display-x1.extcomin => self.P0_19
      spi-display-x1.te       => self.P0_10
    
    supports spi-display-x2 :
      spi-display-x2.sclk     => self.P0_14
      spi-display-x2.cs       => self.P0_18
      spi-display-x2.sd[0]    => self.P0_15
      spi-display-x2.sd[1]    => self.P0_16
      spi-display-x2.extcomin => self.P0_19
      spi-display-x2.te       => self.P0_10
    
    supports spi-display-x4 :
      spi-display-x4.sclk     => self.P0_14
      spi-display-x4.cs       => self.P0_18
      spi-display-x4.sd[0]    => self.P0_15
      spi-display-x4.sd[1]    => self.P0_16
      spi-display-x4.sd[2]    => self.P0_22
      spi-display-x4.sd[3]    => self.P0_17
      spi-display-x4.extcomin => self.P0_19
      spi-display-x4.te       => self.P0_10
