#use-added-syntax(jitx)
defpackage DA7212-01UM2 :
  import core
  import collections
  import math
  import lang-utils
  import jitx
  import jitx/commands

  import ocdb/utils/landpatterns
  import ocdb/utils/symbols
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/generator-utils
  import ocdb/utils/generic-components

  import bundles

defn bga-pad ():
  val ball-diameter = 0.250
  val pastemask-diameter = 0.230
  val soldermask-diameter = 0.260
  inside pcb-landpattern :
    smd-pad(Circle(ball-diameter * 0.5), Circle(soldermask-diameter * 0.5), Circle(pastemask-diameter * 0.5))


pcb-landpattern lp :
  val delta-x = 0.250
  val delta-y = 0.340
  val x-cnt = 17
  val offset-x = -2.0
  val offset-y = 0.510
  val rows = ["A" "B" "C" "D"]
  for (j in rows, j-cnt in 0 to false) do :
    for i in ((j-cnt % 2) + 1) through x-cnt by 2 do :
      val x-loc = offset-x + to-double(i - 1) * delta-x
      val y-loc = offset-y - to-double(j-cnt) * delta-y
      val i-cnt = i % x-cnt
      val pad-name = Ref(append(j, to-string(i)))
      pad (pad-name) : bga-pad() at loc(x-loc, y-loc)
  layer(Courtyard(Top)) = Rectangle(4.6, 1.660)
  layer(Silkscreen("pol", Top)) = Circle(-2.000, 1.000, 0.1)
  ref-label()
  model3d = Model3D("3d-models/DA7212-01UM2.stp",
    Vec3D(0.0, 0.0, 0.0),
    Vec3D(1.0, 1.0, 1.0),
    Vec3D(0.0, 0.0, 0.0))


public pcb-component component :
  mpn = "DA7212-01UM2"
  manufacturer = "Renesas"
  description = "Audio codec and driver"

  pin-properties :
    [ pin : Ref | pads : Ref ...       | side:Dir ]    
    [MIC1_P     |  C17               |  Left    ]
    [MIC1_N     |  B16               |  Left    ]
    [MIC2_P     |  D16               |  Left    ]
    [MIC2_N     |  C15               |  Left    ]
    [AUX_L      |  C13               |  Left    ]
    [AUX_R      |  D14               |  Left    ]
    [MICBIAS1   |  A15               |  Right   ]
    [MICBIAS2   |  A17               |  Right   ]
    [HP_L       |  A3                |  Right   ]
    [HP_R       |  A5                |  Right   ]
    [SP_P       |  B12               |  Right   ]
    [SP_N       |  A13               |  Right   ]
    [HPCSP      |  A1                |  Up      ]
    [HPCSN      |  C1                |  Up      ]
    [HPCFP      |  D2                |  Up      ]
    [HPCFN      |  C3                |  Up      ]
    [SDA        |  C9                |  Right   ]
    [SCL        |  D8                |  Right   ]
    [DATIN      |  C5                |  Right   ]
    [DATOUT     |  C7                |  Left    ]
    [BCLK       |  D4                |  Right   ]
    [WCLK       |  D6                |  Right   ]
    [MCLK       |  C11               |  Right   ]
    [DACREF     |  A7                |  Left    ]
    [VMID       |  A9                |  Up      ]
    [GND_SENSE  |  B4                |  Down    ]
    [VREF       |  B8                |  Up      ]
    [VDD_A      |  B6                |  Up      ]
    [VDD_IO     |  D10               |  Up      ]
    [VDD_SP     |  A11               |  Up      ]
    [VDD_MIC    |  B14               |  Up      ]
    [VDIG       |  D12               |  Up      ]
    [GND_A      |  B10               |  Down    ]
    [GND_CP     |  B2                |  Down    ]

  make-box-symbol()
  assign-landpattern(lp)


public pcb-module module :
  pin GND
  pin VDD1P8P
  pin VDD3P0
  pin VDDSYS
  pin MICBIAS
  port i2c : i2c
  port i2s : i2s([I2S-SDMI I2S-MCK])
  
  public inst codec : DA7212-01UM2/component

  net (GND codec.GND_A codec.GND_CP)
  net (VDD1P8P codec.VDD_A codec.VDD_IO)
  inst rvdd-mic : chip-resistor(0.0)
  component-status(rvdd-mic) :
    bom-status = NotInBOM
  net (VDD3P0 rvdd-mic.p[1])
  net (codec.VDD_MIC rvdd-mic.p[2])

  net (VDDSYS codec.VDD_SP)

  net (MICBIAS codec.MICBIAS1)

  no-connect(codec.HP_L)
  no-connect(codec.HP_R)
  no-connect(codec.GND_SENSE)

  val cap-table = kvs([
    codec.VDD_A    => 1.0e-6
    codec.VDIG     => 0.1e-6
    codec.VDD_IO   => 1.0e-6
    codec.VDD_SP   => 1.0e-6
    codec.MICBIAS1 => 1.0e-6
    codec.MICBIAS2 => 1.0e-6
    codec.VMID     => 1.0e-6
    codec.DACREF   => 1.0e-6
    codec.VDD_MIC  => 1.0e-6
    codec.VREF     => 1.0e-6
    ])
  for [pin_, cap_] in cap-table do:
    bypass-cap-strap(pin_, GND, cap_)

  net (i2c.scl codec.SCL)
  net (i2c.sda codec.SDA)

  net (i2s.sdmo  codec.DATIN)
  net (i2s.sdmi  codec.DATOUT)
  net (i2s.ck    codec.BCLK)
  net (i2s.ws    codec.WCLK)
  net (i2s.mck   codec.MCLK)  
  
  supports PDM :
    PDM.data => codec.MIC1_N
    PDM.clk  => codec.MIC1_P

  no-connect(codec.MIC2_P)
  no-connect(codec.MIC2_N)

  no-connect(codec.AUX_L)
  no-connect(codec.AUX_R)

  no-connect(codec.HP_L)
  no-connect(codec.HP_R)
  
  ; schematic-group(self) = codec
  layout-group(self) = codec
