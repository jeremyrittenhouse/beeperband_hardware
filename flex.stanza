; Generated by JITX 2.21.0-rc.3
#use-added-syntax(jitx)
defpackage flex :
  import core
  import collections
  import math
  import lang-utils
  import jitx
  import jitx/commands

  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/property-structs
  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars

  import helpers
  import rules
  import bundles
  import stackups

  import system

MIN-PKG = "0201"
DESIGN-QUANTITY = 20
APPROVED-DISTRIBUTOR-LIST = [JLCPCB LCSC]

; max_height = 1.5
; DENSITY-LEVEL = 
set-rules(my-flex-rules)

val board-shape = PolygonWithArcs([Arc(Point(1.52997945293385, 9.806351452932), 0.150020548475078, 89.9921526738328, -89.9843053469635),
                   Arc(Point(0.680145831626057, 7.60367134843203), 0.999854170036044, 0.00330367330329241, -43.3483597683887),
                   Arc(Point(1.68000004004006, 6.66000004004007), 0.374999995891885, 136.658190639167, 176.683618721663),
                   Arc(Point(2.62377903251478, 5.6598748325879), 1.00012516866373, 133.338886128638, -43.3360198354712),
                   Arc(Point(4.27999994134978, 6.50999994135037), 0.150000058649642, 89.9999775972757, -89.9999551947726),
                   Arc(Point(4.27999994135092, 2.21000005864905), 0.1500000586491, 0.0, -89.9999551954299),
                   Arc(Point(-17.6699999413528, 2.21000005863223), 0.150000058632238, 269.999977598442, -89.999955202587),
                   Arc(Point(-17.6699999413496, 6.50999994133995), 0.150000058650417, 179.999977593519, -89.9999551907256),
                   Arc(Point(-2.76367134843231, 5.6601458316259), 0.99985417003619, 90.0033036732879, -43.3483597683794),
                   Arc(Point(-1.82000004004015, 6.66000004004009), 0.374999995891942, 226.658190639181, 176.683618721638),
                   Arc(Point(-0.819874832588403, 7.60377903251434), 1.00012516866305, 223.338886128639, -43.3360198354976),
                   Arc(Point(-1.67004772226491, 9.80641972226748), 0.14995228532888, 180.018234364058, -90.036468727137)])
val signal-shape = PolygonWithArcs([Arc(Point(1.52997945293385, 9.806351452932), 0.150020548475078, 89.9921526738328, -89.9843053469635),
                   Arc(Point(0.680145831626057, 7.60367134843203), 0.999854170036044, 0.00330367330329241, -43.3483597683887),
                   Arc(Point(1.68000004004006, 6.66000004004007), 0.374999995891885, 136.658190639167, 176.683618721663),
                   Arc(Point(2.62377903251478, 5.6598748325879), 1.00012516866373, 133.338886128638, -43.3360198354712),
                   Arc(Point(4.27999994134978, 6.50999994135037), 0.150000058649642, 89.9999775972757, -89.9999551947726),
                   Arc(Point(4.27999994135092, 2.21000005864905), 0.1500000586491, 0.0, -89.9999551954299),
                   Arc(Point(-17.6699999413528, 2.21000005863223), 0.150000058632238, 269.999977598442, -89.999955202587),
                   Arc(Point(-17.6699999413496, 6.50999994133995), 0.150000058650417, 179.999977593519, -89.9999551907256),
                   Arc(Point(-2.76367134843231, 5.6601458316259), 0.99985417003619, 90.0033036732879, -43.3483597683794),
                   Arc(Point(-1.82000004004015, 6.66000004004009), 0.374999995891942, 226.658190639181, 176.683618721638),
                   Arc(Point(-0.819874832588403, 7.60377903251434), 1.00012516866305, 223.338886128639, -43.3360198354976),
                   Arc(Point(-1.67004772226491, 9.80641972226748), 0.14995228532888, 180.018234364058, -90.036468727137)])

; Module to run as a design
public pcb-module beeper-flex :

  port main : flex-signals

  ; let's instance all of the major elements of the design on the flex
  ; inst vad : PMM-3738-VM1000-R/module
  inst mic : IM69D130V01XTSA1/module[2]
  ; inst led : L23-23B_R6GHBHW-C30_2A/component
  inst conn : beeper-connector(flex-board)

  place(conn)   at loc( -0.075, 8.70) on Top
  place(mic[0]) at loc(-16.000 + 0.680, 4.160, 180.0) on Top
  place(mic[1]) at loc(  2.610 - 0.680, 4.160,   0.0) on Top
 
  net (main conn.c)
  layer(Cutout()) = Circle(-16.000, 4.160, 0.400) ;   ; layer(Cutout()) = Circle(0.680, 0.000, 0.400)
  layer(Cutout()) = Circle(  2.610, 4.160, 0.400) ;   ; layer(Cutout()) = Circle(0.680, 0.000, 0.400)

  layer(SolderMask(Top)) = Polyline(0.450, [Arc(Point(-16.000, 4.160), (0.580 + 0.225), 0.00, 360.00)])
  layer(SolderMask(Top)) = Polyline(0.450, [Arc(Point(  2.610, 4.160), (0.580 + 0.225), 0.00, 360.00)])
  
  net VDDMIC (mic[0].VDD mic[1].VDD mic[0].SELECT) ; output data from mic[0] on high CLK phase
  net GND    (mic[0].GND mic[1].GND mic[1].SELECT) ; output data from mic[1] on low CLK phase

  ; combine PDM
  net PDM (mic[0].PDM mic[1].PDM)


  net (VDDMIC     conn.c.VDDMIC  )
  net (GND        conn.c.GND     )
  net (PDM     conn.c.PDM  )

  ; let's make prettier schematics
  symbol(GND) = ocdb/utils/symbols/ground-sym
  ; for n_ in [VDDVAD VDDMIC VDDLED] do :
  for n_ in [ VDDMIC ] do :
    symbol(n_) = ocdb/utils/symbols/altium-power-bar-sym

  ; power planes (let's assume 2 layers for now...)
  geom(VDDMIC) :
    copper-pour(LayerIndex(0), isolate = 0.100, rank = 1) = signal-shape
  
  geom(GND) :
    copper-pour(LayerIndex(1), isolate = 0.080, rank = 1) = signal-shape

  schematic-group(self) = flex-board
  layout-group(self) = flex-board


public pcb-board my-flex-board (-- stack:Stackup, outline:Shape, vias:Tuple<Via>) :
  stackup = stack
  boundary = outline
  signal-boundary = outline
  vias = vias

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not given default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "beeper-flex",
  my-flex-board(stack = jlcpcb-flex-2-layer-110um, outline = board-shape, vias = [flex-via])
  vendors = APPROVED-DISTRIBUTOR-LIST
  quantity = DESIGN-QUANTITY
)

; Set the schematic sheet size
set-paper(ANSI-B)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(beeper-flex)

; View the results
view-schematic()
view-board()

set-bom-columns([
  BOMColumn(BOMFieldDescription, "Comment", 10.0)
  BOMColumn(BOMFieldInsts, "Designator", 10.0)
  BOMColumn(BOMFieldSKU, "JLCPCB Part#", 10.0)
  BOMColumn(BOMFieldMPN, "MPN", 10.0)
  BOMColumn(BOMFieldDescription, "Description", 20.0)
])
view-bom(BOM-STD)
; view-design-explorer()
