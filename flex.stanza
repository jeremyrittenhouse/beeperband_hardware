; Generated by JITX 2.21.0-rc.3
#use-added-syntax(jitx)
defpackage flex :
  import core
  import collections
  import math
  import lang-utils
  import jitx
  import jitx/commands

  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/property-structs
  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars

  import helpers
  import rules
  import bundles
  import stackups

  import system


MIN-PKG = "0201"
DESIGN-QUANTITY = 10
; max_height = 1.5
; DENSITY-LEVEL = 
set-rules(my-flex-rules)


val board-shape = Polygon([
                   Point( -3.250,  15.000),
                   Point( -3.250, -15.000),
                   Point(  3.250, -15.000),
                   Point(  3.250,  15.000)]); Rectangle(26.0, 19.0)

val signal-shape = Polygon([
                   Point( -3.250,  15.000),
                   Point( -3.250, -15.000),
                   Point(  3.250, -15.000),
                   Point(  3.250,  15.000)]); Rectangle(26.0, 19.0)


; Module to run as a design
public pcb-module beeper-flex :

  port main : flex-signals

  ; let's instance all of the major elements of the design on the flex
  inst vad : PMM-3738-VM1000-R/module
  inst mic : GMA3526H10-B26/module[2]
  inst led : L23-23B_R6GHBHW-C30_2A/component
  inst conn : beeper-connector(flex-board)

  place(conn) at loc(0.000, 15.000 - 1.250) on Top
  net VDDMIC     (conn.connections.VDDMIC  )
  net VDDVAD     (conn.connections.VDDVAD  )
  net VDDLED     (conn.connections.VDDLED  )
  net GND        (conn.connections.GND     )
  net MICCLK     (conn.connections.MICCLK  )
  net MICDATA    (conn.connections.MICDATA )
  net LEDR       (conn.connections.LEDR    )
  net LEDG       (conn.connections.LEDG    )
  net LEDB       (conn.connections.LEDB    )
  net SPKP       (conn.connections.SPKP    )
  net SPKN       (conn.connections.SPKN    )
  net VADOUT     (conn.connections.VADOUT  )

  net (main conn.connections)

  net (VDDVAD vad.VDD)
  net (VDDMIC mic[0].VDD mic[1].VDD)
  net (VDDLED led.A)
  net (GND vad.GND mic[0].GND mic[1].GND)

  net (VADOUT vad.OUT)
  net (LEDR led.R)
  net (LEDG led.G)
  net (LEDB led.B)

  ; combine PDM
  net (MICCLK  mic[0].PDM.clk mic[1].PDM.clk)
  net (MICDATA mic[0].PDM.data mic[1].PDM.data)
  net (VDDMIC mic[0].SELECT) ; output data from mic[0] on high CLK phase
  net (GND    mic[1].SELECT) ; output data from mic[1] on low CLK phase

  ; let's make prettier schematics
  symbol(GND) = ocdb/utils/symbols/ground-sym
  for n_ in [VDDVAD VDDMIC VDDLED] do :
    symbol(n_) = ocdb/utils/symbols/altium-power-bar-sym

  ; power planes (let's assume 2 layers for now...)
  ; geom(GND) :
  ;   copper-pour(LayerIndex(1), isolate = 0.1, rank = 1) = signal-shape

  schematic-group(self) = flex-board
  layout-group(self) = flex-board

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not given default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "beeper-flex",
  ocdb/utils/defaults/default-board(jlcpcb-flex-2-layer-110um, board-shape)
  quantity = DESIGN-QUANTITY
)

; Set the schematic sheet size
set-paper(ANSI-B)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(beeper-flex)

; View the results
view-schematic()
view-board()
; view-design-explorer()
