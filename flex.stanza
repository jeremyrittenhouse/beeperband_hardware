; Generated by JITX 2.21.0-rc.3
#use-added-syntax(jitx)
defpackage flex :
  import core
  import collections
  import math
  import lang-utils
  import jitx
  import jitx/commands

  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/bundles
  import ocdb/utils/property-structs
  import ocdb/utils/generator-utils
  import ocdb/utils/design-vars

  import helpers
  import rules
  import bundles
  import stackups

  import system

MIN-PKG = "0201"
DESIGN-QUANTITY = 20
APPROVED-DISTRIBUTOR-LIST = [JLCPCB]
set-bom-columns([
  BOMColumn(BOMFieldDescription, "Comment", 10.0)
  BOMColumn(BOMFieldInsts, "Designator", 10.0)
  BOMColumn(BOMFieldSKU, "JLCPCB Part#", 10.0)
  BOMColumn(BOMFieldMPN, "MPN", 10.0)
  BOMColumn(BOMFieldDescription, "Description", 20.0)
])

; max_height = 1.5
; DENSITY-LEVEL = 
set-rules(my-flex-rules)

val board-shape = PolygonWithArcs([Arc(Point(-7.13999995996006, 7.57000004004006), 0.374999995891959, 313.341809360845, -176.683618721691),
                   Arc(Point(-8.13985416837373, 8.51367134843125), 0.99985417003584, 316.654943904939, 43.348359768409),
                   Point(-7.13999999999999, 9.316372),
                   Point(-13.14, 9.316372),
                   Arc(Point(-12.1399823116418, 8.51373632467858), 1.00001768838713, 180.000419665746, 43.3409130905978),
                   Arc(Point(-13.1400000400407, 7.57000004004016), 0.374999995892264, 43.341809360757, -176.68361872151),
                   Arc(Point(-14.0836713484312, 6.57014583162532), 0.999854170036769, 46.6549439049762, 43.3483597683727),
                   Point(-19.14, 7.56999999999999),
                   Point(-19.14, 3.97),
                   Point(2.86000000000001, 3.97),
                   Point(2.86000000000001, 7.56999999999999),
                   Arc(Point(-6.19622096748629, 6.56987483258823), 1.00012516866276, 90.0028662931054, 43.3360198355006)])
val signal-shape = PolygonWithArcs([Arc(Point(-7.13999995996006, 7.57000004004006), 0.374999995891959, 313.341809360845, -176.683618721691),
                   Arc(Point(-8.13985416837373, 8.51367134843125), 0.99985417003584, 316.654943904939, 43.348359768409),
                   Point(-7.13999999999999, 9.316372),
                   Point(-13.14, 9.316372),
                   Arc(Point(-12.1399823116418, 8.51373632467858), 1.00001768838713, 180.000419665746, 43.3409130905978),
                   Arc(Point(-13.1400000400407, 7.57000004004016), 0.374999995892264, 43.341809360757, -176.68361872151),
                   Arc(Point(-14.0836713484312, 6.57014583162532), 0.999854170036769, 46.6549439049762, 43.3483597683727),
                   Point(-19.14, 7.56999999999999),
                   Point(-19.14, 3.97),
                   Point(2.86000000000001, 3.97),
                   Point(2.86000000000001, 7.56999999999999),
                   Arc(Point(-6.19622096748629, 6.56987483258823), 1.00012516866276, 90.0028662931054, 43.3360198355006)])


; Module to run as a design
public pcb-module beeper-flex :

  port main : flex-signals

  ; let's instance all of the major elements of the design on the flex
  ; inst vad : PMM-3738-VM1000-R/module
  inst mic : IM69D130V01XTSA1/module[2]
  ; inst led : L23-23B_R6GHBHW-C30_2A/component
  inst conn : beeper-connector(flex-board)

  ; place(conn) at loc(0.000, 15.000 - 1.250) on Top
  place(mic[0]) at loc(-17.559 + 0.680, 5.695, 180.0) on Top
  place(mic[1]) at loc(  1.279 - 0.680, 5.695,   0.0) on Top
 
  net (main conn.c)
  layer(Cutout()) = Circle(-17.559, 5.695, 0.400) ;   ; layer(Cutout()) = Circle(0.680, 0.000, 0.400)
  layer(Cutout()) = Circle(  1.279, 5.695, 0.400) ;   ; layer(Cutout()) = Circle(0.680, 0.000, 0.400)

  layer(SolderMask(Top)) = Polyline(0.450, [Arc(Point(-17.559, 5.695), (0.580 + 0.225), 0.00, 360.00)])
  layer(SolderMask(Top)) = Polyline(0.450, [Arc(Point(  1.279, 5.695), (0.580 + 0.225), 0.00, 360.00)])
  
  ; net VDDVAD (vad.VDD)
  net VDDMIC (mic[0].VDD mic[1].VDD mic[0].SELECT) ; output data from mic[0] on high CLK phase
  ; net VDDLED (led.A)
  net GND    (mic[0].GND mic[1].GND mic[1].SELECT) ; output data from mic[1] on low CLK phase

  ; combine PDM
  net PDM (mic[0].PDM mic[1].PDM)


  net (VDDMIC     conn.c.VDDMIC  )
  net (GND        conn.c.GND     )
  net (PDM     conn.c.PDM  )

  ; let's make prettier schematics
  symbol(GND) = ocdb/utils/symbols/ground-sym
  ; for n_ in [VDDVAD VDDMIC VDDLED] do :
  for n_ in [ VDDMIC ] do :
    symbol(n_) = ocdb/utils/symbols/altium-power-bar-sym

  ; power planes (let's assume 2 layers for now...)
  geom(VDDMIC) :
    copper-pour(LayerIndex(0), isolate = 0.100, rank = 1) = signal-shape
  
  geom(GND) :
    copper-pour(LayerIndex(1), isolate = 0.080, rank = 1) = signal-shape

  schematic-group(self) = flex-board
  layout-group(self) = flex-board


public pcb-board my-flex-board (-- stack:Stackup, outline:Shape, vias:Tuple<Via>) :
  stackup = stack
  boundary = outline
  signal-boundary = outline
  vias = vias

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not given default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "beeper-flex",
  my-flex-board(stack = jlcpcb-flex-2-layer-110um, outline = board-shape, vias = [flex-via])
  vendors = APPROVED-DISTRIBUTOR-LIST
  quantity = DESIGN-QUANTITY
)

; Set the schematic sheet size
set-paper(ANSI-B)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(beeper-flex)

; View the results
view-schematic()
view-board()
view-design-explorer()
